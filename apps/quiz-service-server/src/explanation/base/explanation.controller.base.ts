/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExplanationService } from "../explanation.service";
import { ExplanationCreateInput } from "./ExplanationCreateInput";
import { Explanation } from "./Explanation";
import { ExplanationFindManyArgs } from "./ExplanationFindManyArgs";
import { ExplanationWhereUniqueInput } from "./ExplanationWhereUniqueInput";
import { ExplanationUpdateInput } from "./ExplanationUpdateInput";

export class ExplanationControllerBase {
  constructor(protected readonly service: ExplanationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Explanation })
  async createExplanation(
    @common.Body() data: ExplanationCreateInput
  ): Promise<Explanation> {
    return await this.service.createExplanation({
      data: {
        ...data,

        question: data.question
          ? {
              connect: data.question,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        question: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Explanation] })
  @ApiNestedQuery(ExplanationFindManyArgs)
  async explanations(@common.Req() request: Request): Promise<Explanation[]> {
    const args = plainToClass(ExplanationFindManyArgs, request.query);
    return this.service.explanations({
      ...args,
      select: {
        createdAt: true,
        id: true,

        question: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Explanation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async explanation(
    @common.Param() params: ExplanationWhereUniqueInput
  ): Promise<Explanation | null> {
    const result = await this.service.explanation({
      where: params,
      select: {
        createdAt: true,
        id: true,

        question: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Explanation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExplanation(
    @common.Param() params: ExplanationWhereUniqueInput,
    @common.Body() data: ExplanationUpdateInput
  ): Promise<Explanation | null> {
    try {
      return await this.service.updateExplanation({
        where: params,
        data: {
          ...data,

          question: data.question
            ? {
                connect: data.question,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          question: {
            select: {
              id: true,
            },
          },

          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Explanation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExplanation(
    @common.Param() params: ExplanationWhereUniqueInput
  ): Promise<Explanation | null> {
    try {
      return await this.service.deleteExplanation({
        where: params,
        select: {
          createdAt: true,
          id: true,

          question: {
            select: {
              id: true,
            },
          },

          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
