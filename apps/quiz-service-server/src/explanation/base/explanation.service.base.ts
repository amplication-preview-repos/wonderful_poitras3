/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Explanation as PrismaExplanation,
  Question as PrismaQuestion,
} from "@prisma/client";

export class ExplanationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExplanationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.explanation.count(args);
  }

  async explanations<T extends Prisma.ExplanationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExplanationFindManyArgs>
  ): Promise<PrismaExplanation[]> {
    return this.prisma.explanation.findMany<Prisma.ExplanationFindManyArgs>(
      args
    );
  }
  async explanation<T extends Prisma.ExplanationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExplanationFindUniqueArgs>
  ): Promise<PrismaExplanation | null> {
    return this.prisma.explanation.findUnique(args);
  }
  async createExplanation<T extends Prisma.ExplanationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExplanationCreateArgs>
  ): Promise<PrismaExplanation> {
    return this.prisma.explanation.create<T>(args);
  }
  async updateExplanation<T extends Prisma.ExplanationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExplanationUpdateArgs>
  ): Promise<PrismaExplanation> {
    return this.prisma.explanation.update<T>(args);
  }
  async deleteExplanation<T extends Prisma.ExplanationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExplanationDeleteArgs>
  ): Promise<PrismaExplanation> {
    return this.prisma.explanation.delete(args);
  }

  async getQuestion(parentId: string): Promise<PrismaQuestion | null> {
    return this.prisma.explanation
      .findUnique({
        where: { id: parentId },
      })
      .question();
  }
}
