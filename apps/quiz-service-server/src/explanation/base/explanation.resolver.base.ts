/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Explanation } from "./Explanation";
import { ExplanationCountArgs } from "./ExplanationCountArgs";
import { ExplanationFindManyArgs } from "./ExplanationFindManyArgs";
import { ExplanationFindUniqueArgs } from "./ExplanationFindUniqueArgs";
import { CreateExplanationArgs } from "./CreateExplanationArgs";
import { UpdateExplanationArgs } from "./UpdateExplanationArgs";
import { DeleteExplanationArgs } from "./DeleteExplanationArgs";
import { Question } from "../../question/base/Question";
import { ExplanationService } from "../explanation.service";
@graphql.Resolver(() => Explanation)
export class ExplanationResolverBase {
  constructor(protected readonly service: ExplanationService) {}

  async _explanationsMeta(
    @graphql.Args() args: ExplanationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Explanation])
  async explanations(
    @graphql.Args() args: ExplanationFindManyArgs
  ): Promise<Explanation[]> {
    return this.service.explanations(args);
  }

  @graphql.Query(() => Explanation, { nullable: true })
  async explanation(
    @graphql.Args() args: ExplanationFindUniqueArgs
  ): Promise<Explanation | null> {
    const result = await this.service.explanation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Explanation)
  async createExplanation(
    @graphql.Args() args: CreateExplanationArgs
  ): Promise<Explanation> {
    return await this.service.createExplanation({
      ...args,
      data: {
        ...args.data,

        question: args.data.question
          ? {
              connect: args.data.question,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Explanation)
  async updateExplanation(
    @graphql.Args() args: UpdateExplanationArgs
  ): Promise<Explanation | null> {
    try {
      return await this.service.updateExplanation({
        ...args,
        data: {
          ...args.data,

          question: args.data.question
            ? {
                connect: args.data.question,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Explanation)
  async deleteExplanation(
    @graphql.Args() args: DeleteExplanationArgs
  ): Promise<Explanation | null> {
    try {
      return await this.service.deleteExplanation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Question, {
    nullable: true,
    name: "question",
  })
  async getQuestion(
    @graphql.Parent() parent: Explanation
  ): Promise<Question | null> {
    const result = await this.service.getQuestion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
